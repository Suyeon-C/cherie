package com.cart.controller;


import static org.junit.Assert.assertNotNull;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.dto.Cart;
import com.dto.Jewelry;
import com.dto.Order;
import com.service.CartService;
import com.service.JewelryService;
import com.service.OrderService;
import com.siot.IamportRestClient.IamportClient;
import com.siot.IamportRestClient.exception.IamportResponseException;
import com.siot.IamportRestClient.response.AccessToken;
import com.siot.IamportRestClient.response.IamportResponse;
import com.siot.IamportRestClient.response.Payment;

@Controller
public class IamportController  {

	
	
	@Autowired
	OrderService oser;
	
	@Autowired
	JewelryService jser;
	
	@Autowired
	CartService cser;
	
	
		// ajax POST 방식으로 전송
		@RequestMapping(value="/cart/payment")
		@ResponseBody
		public String post(
				@RequestParam(value = "orderZipcode") String orderZipcode,
				@RequestParam(value = "orderAddress") String orderAddress, 
				@RequestParam(value = "orderDaddress") String orderDaddress,
				@RequestParam(value = "orderBuyEmail") String orderBuyEmail, 
				@RequestParam(value = "orderRequest") String orderRequest,
				@RequestParam(value = "orderPhone") String orderPhone, 
				@RequestParam(value = "orderTotalPay") int orderTotalPay,
				HttpSession session) throws IOException {
			
			List<Cart> mycart = (List<Cart>) session.getAttribute("cartlists");
			System.out.println("===> 확인 mycart : " + mycart);
			
			int cnt;
			for(Cart cart : mycart) { // bean setting
				cnt = -1;
				
				Order bean = new Order();
				
				bean.setOrderZipcode(orderZipcode);
				bean.setOrderAddress(orderAddress);
				bean.setOrderDaddress(orderDaddress);
				bean.setOrderBuyEmail(orderBuyEmail);
				bean.setOrderRequest(orderRequest);
				bean.setOrderPhone(orderPhone);
				bean.setOrderTotalPay(orderTotalPay);
				bean.setOrderNum(cart.getCartJewNum());
				bean.setOrderQua(cart.getCartBuyQua());
				bean.setOrderPayment(cart.getCartPrice());
				
				Jewelry jew = jser.selectJew(cart.getCartJewNum());
				System.out.println(" 확인 jew ===> " + jew);
				
				if(jew.getJewStock() - bean.getOrderQua() >= 0) {
					
					cnt = this.oser.insertOrder(bean);
					
					if(cnt > 0) {
						System.out.println("===> 상품 결제 성공");
						
						this.jser.updateStock(bean.getOrderNum(), bean.getOrderQua());
						System.out.println("===> 재고 차감 성공");
						
						// 1-3. 장바구니 삭제
						cnt = -1;
						cnt = this.cser.cartDeleteByEmail(orderBuyEmail);
						
						if (cnt > 0) { // 장바구니 삭제 성공
							System.out.println("===> 장바구니 삭제 성공");
							session.setAttribute("message", "상품이 성공적으로 결제 되었습니다!");
								return "common/main";
						}
						
					} else { // 결제 실패
						System.out.println("===> 상품 결제 실패");
						session.setAttribute("message", "상품 결제가 실패되었습니다!");
						return "common/main";
					}
					
				} else {  // 2. 재고 없음 ---> 결제 실패
					System.out.println("재고 없음, 상품 결제 실패");
					session.setAttribute("message", "상품 재고가 부족합니다!");
					return "common/main";
				}
			
			}
			return "common/main";
		}}
			
			
		
					